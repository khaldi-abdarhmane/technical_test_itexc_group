# A generic, single database configuration.

[alembic]
# Path to migration scripts
script_location = alembic

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# Logging configuration
# Uncomment and set to the level you want: DEBUG, INFO, WARN, ERROR, CRITICAL
# Logging is very useful for tracking the operation of Alembic.
# logging.config_file = alembic_logging.ini

[post_write_hooks]
# List of hooks to run post-migration
# post_write_hooks =

# Output templates for each kind of migration step
# Hook can be used to, for example, format the output of autogenerate
# post_write_hooks = my_custom_hook
# post_write_hooks = another_hook

[post_write_hooks.my_custom_hook]
# Python import path of your hook function
# callable = my_module.my_hook

# Arguments to pass to your hook function
# kwargs =

[logging]
# If you want to configure logging here instead of a separate file
# example:
# default = %(levelname)s: %(message)s
# sqlalchemy = INFO

# Uncomment to disable logging from certain SQLAlchemy categories
# sqlalchemy.engine = WARN

# Uncomment to enable very detailed logging for migrations and SQL operations
# sqlalchemy.pool = DEBUG

[loggers]
keys = root, sqlalchemy, alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)s: %(message)s
